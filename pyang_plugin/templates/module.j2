"""{{ module.name }}."""

import yang_types

__module__ = "{{ module.name }}"

__namespace__ = "{{ module.info.namespace }}"

__prefix__ = "{{ module.info.prefix }}"

__organization__ = "{{ module.info.organization }}"

__contact__ = """
{{ module.info.contact }}
"""

__description__ = """
{{ module.info.description }}
"""
{% for name, typedef in module.typedefs.items() %}

class {{ name|safe_class_name }}(yang_types.Base):
    """
{{ typedef.description|indent }}
    """

    def __init__(self):
        """Main instantiator."""
{%- for leaf, leaf_data in typedef.leaf.items() %}
        self.{{ leaf|safe_attr_name }} == yang_types.{{ leaf_data.type.value.replace('yang:', '')|safe_class_name }}(options={{ leaf_data.type.options|to_dict(level=3) }})
{%- endfor %}
{%- for ctr, ctr_data in typedef.container.items() %}
        self.{{ ctr|safe_attr_name }} == {{ ctr_data.type|safe_class_name }}()
{%- endfor %}
{% for leaf, leaf_data in typedef.leaf.items() %}
    @property
    def {{ leaf|safe_attr_name }}(self):
        return self.{{ leaf|safe_attr_name }}

    @{{ leaf|safe_attr_name }}.setter
    def {{ leaf|safe_attr_name }}(self, value):
        self.{{ leaf|safe_attr_name }} = yang_types.{{ leaf_data.type.value.replace('yang:', '')|safe_class_name }}(value, options={{ leaf_data.type.options|to_dict(level=3) }})
{% endfor %}
{%- for ctr, ctr_data in typedef.container.items() %}
    @property
    def {{ ctr|safe_attr_name }}(self):
        return self.{{ ctr|safe_attr_name }}

    @{{ ctr|safe_attr_name }}.setter
    def {{ ctr|safe_attr_name }}(self, value):
        self.{{ ctr|safe_attr_name }} = yang_types.{{ ctr_data.type|safe_class_name }}(value)
{% endfor %}
{%- endfor -%}
